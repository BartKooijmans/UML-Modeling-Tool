/*
 * ElementGUI class Interface class for managing the model and element components
 */
package finalproject;

import java.io.*;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * 
 * @author Bart Kooijmans
 */
public class ElementGUI extends javax.swing.JPanel
{

    private Element selectedElement;
    private MainController guiController;
    private String attributes = new String();
    private String operations = new String();
    private String responsibilities = new String();
    private String notes = new String();
    private int activeEditorField;
    private JFileChooser linkFileChooser;

    /**
     * Constructor for the ElementGUI 
     * 
     * @param suppliedGuiController 
     */    
    public ElementGUI(MainController suppliedGuiController)
    {
        guiController = suppliedGuiController;
        linkFileChooser = new JFileChooser();
        linkFileChooser.setFileFilter(guiController.getJSONfilter());
        initComponents();
        updateList();
        updateTypeBox();
        updateBoxes();
    }

    /**
     * updates the list of elements and sets it to the selected element
     */
    private void updateList()
    {
        guiController.loadAllInstances();
        listElements.removeAll();
        for (Element tempElement : guiController.getElements())
        {
            listElements.add(tempElement.toString());
        }
        if (selectedElement != null)
        {
            int index = 0;
            while (listElements.getItem(index).equals(selectedElement.toString()) == false)
            {
                index++;
            }
            listElements.select(index);
        }
        this.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jMenuItem1 = new javax.swing.JMenuItem();
        fieldIdentifier = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fieldDescription = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        fieldStartLevel = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        fieldEndLevel = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        fieldTeminationLevel = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stringArrayEditor = new javax.swing.JEditorPane();
        editAttributesButton = new javax.swing.JButton();
        editOperationsButton = new javax.swing.JButton();
        editResponsibiltiesButton = new javax.swing.JButton();
        editConnectionButton = new javax.swing.JButton();
        connectionBox = new javax.swing.JComboBox<>();
        newConnectionButton = new javax.swing.JButton();
        removeConnectionButton = new javax.swing.JButton();
        innerElementBox = new javax.swing.JComboBox<>();
        editInnerElementButton = new javax.swing.JButton();
        removeInnerElementButton = new javax.swing.JButton();
        newInnerElementButton = new javax.swing.JButton();
        editNotesButton = new javax.swing.JButton();
        boxType = new javax.swing.JComboBox<>();
        saveButton = new javax.swing.JButton();
        listElements = new java.awt.List();
        newElementButton = new javax.swing.JButton();
        removeElement = new javax.swing.JButton();
        boxModelToModel = new javax.swing.JComboBox<>();
        linkModelToM = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        delinkModelFromM = new javax.swing.JButton();
        loadLinkedModelM = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        boxModelToElement = new javax.swing.JComboBox<>();
        linkModelToE = new javax.swing.JButton();
        loadLinkedModelE = new javax.swing.JButton();
        delinkModelFromE = new javax.swing.JButton();
        labelTextfield = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jMenuItem1.setText("jMenuItem1");

        fieldIdentifier.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        fieldIdentifier.setAlignmentX(0.0F);
        fieldIdentifier.setEnabled(false);

        jLabel1.setText("Identifier:");

        jLabel2.setText("Type:");

        fieldDescription.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        fieldDescription.setAlignmentX(0.0F);

        jLabel3.setText("Description:");

        jLabel7.setText("Connections: ");

        jLabel8.setText("Inner elements:");

        fieldStartLevel.setAlignmentX(0.0F);

        jLabel9.setText("Start level:");

        fieldEndLevel.setAlignmentX(0.0F);

        jLabel10.setText("End level:");

        fieldTeminationLevel.setAlignmentX(0.0F);

        jLabel11.setText("Termination Level:  ");

        jLabel12.setText("Edit: ");

        stringArrayEditor.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                stringArrayEditorFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(stringArrayEditor);

        editAttributesButton.setText("Attributes");
        editAttributesButton.setMaximumSize(new java.awt.Dimension(85, 23));
        editAttributesButton.setMinimumSize(new java.awt.Dimension(85, 23));
        editAttributesButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editAttributesButtonActionPerformed(evt);
            }
        });

        editOperationsButton.setText("Operations");
        editOperationsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editOperationsButtonActionPerformed(evt);
            }
        });

        editResponsibiltiesButton.setText("Responsibilities");
        editResponsibiltiesButton.setAlignmentX(0.5F);
        editResponsibiltiesButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editResponsibiltiesButtonActionPerformed(evt);
            }
        });

        editConnectionButton.setText("Edit Connection");
        editConnectionButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editConnectionButtonActionPerformed(evt);
            }
        });

        connectionBox.setMaximumRowCount(100);
        connectionBox.setAlignmentX(0.0F);
        connectionBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
        {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
            {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
            {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
            {
                connectionBoxPopupMenuWillBecomeVisible(evt);
            }
        });

        newConnectionButton.setText("New Connection");
        newConnectionButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newConnectionButtonActionPerformed(evt);
            }
        });

        removeConnectionButton.setText("Remove Connection");
        removeConnectionButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                removeConnectionButtonActionPerformed(evt);
            }
        });

        innerElementBox.setMaximumRowCount(100);
        innerElementBox.setAlignmentX(0.0F);
        innerElementBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener()
        {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt)
            {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)
            {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)
            {
                innerElementBoxPopupMenuWillBecomeVisible(evt);
            }
        });

        editInnerElementButton.setText("Edit Inner Element");
        editInnerElementButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editInnerElementButtonActionPerformed(evt);
            }
        });

        removeInnerElementButton.setText("Remove Inner Element");
        removeInnerElementButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                removeInnerElementButtonActionPerformed(evt);
            }
        });

        newInnerElementButton.setText("New Inner Element");
        newInnerElementButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newInnerElementButtonActionPerformed(evt);
            }
        });

        editNotesButton.setText("Notes");
        editNotesButton.setAlignmentX(0.5F);
        editNotesButton.setMaximumSize(new java.awt.Dimension(85, 23));
        editNotesButton.setMinimumSize(new java.awt.Dimension(85, 23));
        editNotesButton.setPreferredSize(new java.awt.Dimension(85, 23));
        editNotesButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editNotesButtonActionPerformed(evt);
            }
        });

        boxType.setAlignmentX(0.0F);

        saveButton.setText("Save changes to element");
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });

        listElements.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                listElementsActionPerformed(evt);
            }
        });

        newElementButton.setText("Create new element");
        newElementButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newElementButtonActionPerformed(evt);
            }
        });

        removeElement.setText("Remove selected element");
        removeElement.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                removeElementActionPerformed(evt);
            }
        });

        linkModelToM.setText("Add linked model to model");
        linkModelToM.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                linkModelToMActionPerformed(evt);
            }
        });

        jLabel13.setText("Connected models to model:");

        delinkModelFromM.setText("Remove linked model");
        delinkModelFromM.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                delinkModelFromMActionPerformed(evt);
            }
        });

        loadLinkedModelM.setText("Load linked model");
        loadLinkedModelM.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadLinkedModelMActionPerformed(evt);
            }
        });

        jLabel14.setText("Models linked to element:");

        linkModelToE.setText("Add linked model to element");
        linkModelToE.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                linkModelToEActionPerformed(evt);
            }
        });

        loadLinkedModelE.setText("Load linked model");
        loadLinkedModelE.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadLinkedModelEActionPerformed(evt);
            }
        });

        delinkModelFromE.setText("Remove linked model");
        delinkModelFromE.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                delinkModelFromEActionPerformed(evt);
            }
        });

        labelTextfield.setText("Nothing selected: ");

        jLabel4.setText("Elements in model:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loadLinkedModelM, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delinkModelFromM, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeElement, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                            .addComponent(newElementButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(boxModelToModel, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(linkModelToM, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listElements, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(connectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(newConnectionButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editConnectionButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(removeConnectionButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(innerElementBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(newInnerElementButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editInnerElementButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(removeInnerElementButton))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editNotesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editAttributesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editOperationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editResponsibiltiesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 242, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fieldIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(boxType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fieldStartLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldEndLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldTeminationLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(loadLinkedModelE, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                .addComponent(boxModelToElement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(delinkModelFromE, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelTextfield)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(12, 12, 12))
                                    .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(linkModelToE, javax.swing.GroupLayout.Alignment.TRAILING))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(258, 258, 258)
                .addComponent(newElementButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeElement)
                .addGap(22, 22, 22)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(linkModelToM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxModelToModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(loadLinkedModelM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delinkModelFromM)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveButton)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(boxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(linkModelToE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addComponent(boxModelToElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadLinkedModelE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delinkModelFromE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldStartLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldEndLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldTeminationLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(editConnectionButton)
                    .addComponent(connectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newConnectionButton)
                    .addComponent(removeConnectionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(editInnerElementButton)
                    .addComponent(innerElementBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newInnerElementButton)
                    .addComponent(removeInnerElementButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 49, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editNotesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editAttributesButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(editOperationsButton)
                        .addComponent(editResponsibiltiesButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(27, 27, 27)
                .addComponent(listElements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void listElementsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_listElementsActionPerformed
    {//GEN-HEADEREND:event_listElementsActionPerformed
        if (selectedElement == null)
        {
            loadSelectedElement();
        }
        else
        {
            guiController.loadAllInstances();
            String lookup = listElements.getSelectedItem();
            lookup = guiController.getIDFromBox(lookup);
            int selectedItem = listElements.getSelectedIndex();
            saveChanges();
            listElements.select(selectedItem);
            selectedElement = guiController.findElement(lookup);
            loadSelectedElement();
        }
    }//GEN-LAST:event_listElementsActionPerformed

    /**
     * Saves the changes to the element, afterwards tell the main controller to update its lists. and update the element list based on the new list.
     */
    private void saveChanges()
    {
            saveElement();
            guiController.loadAllInstances();
            updateList();
    }

    /**
     * Stores the values entered in the fields in the selected active element.
     */
    private void saveElement()
    {
        if (selectedElement != null)
        {
            ArrayList<String> operationsList = splitString(operations);
            ArrayList<String> attributesList = splitString(attributes);
            ArrayList<String> responsibilitiesList = splitString(responsibilities);
            selectedElement.setOperations(operationsList);
            selectedElement.setAttributes(attributesList);
            selectedElement.setResponsibilities(responsibilitiesList);
            if (boxType.getSelectedIndex() == -1)
            {
                boxType.setSelectedIndex(0);
            }
            selectedElement.setType(boxType.getSelectedItem().toString());
            selectedElement.setDescription(fieldDescription.getText());
            selectedElement.setStartLevel(Integer.parseInt(fieldStartLevel.getText()));
            selectedElement.setEndLevel(Integer.parseInt(fieldEndLevel.getText()));
            selectedElement.setTerminationLevel(Integer.parseInt(fieldTeminationLevel.getText()));
            selectedElement.setNotes(notes);
        }
    }

    /**
     * Splits the given spring up into multiple strings, based on each new line break , \n , within the string , and adds them to an ArrayList that get returned.
     * 
     * @param n String to be split up based on each line
     * @return ArrayList containing the Strings that the original spring was split up in.
     */
    private ArrayList<String> splitString(String n)
    {
        ArrayList<String> tempList = new ArrayList<>();
        String[] temp = n.split("\n");
        tempList.addAll(Arrays.asList(temp));
        return tempList;
    }

    /**
     * Looks up the selected element based on the text value selected in the element list, sets that element as the selectedElement and  loads the the values into the ui fields
     */
    private void loadSelectedElement()
    {
        enableButtons();
        String lookup = listElements.getSelectedItem();
        lookup = guiController.getIDFromBox(lookup);
        selectedElement = guiController.findElement(lookup);
        String type = selectedElement.getType();
        boxType.setSelectedItem(type);
        fieldIdentifier.setText(selectedElement.getIdentifier());
        fieldDescription.setText(selectedElement.getDescription());
        fieldStartLevel.setText(Integer.toString(selectedElement.getStartLevel()));
        fieldEndLevel.setText(Integer.toString(selectedElement.getEndLevel()));
        fieldTeminationLevel.setText(Integer.toString(selectedElement.getterminationLevel()));
        attributes = "";
        operations = "";
        responsibilities = "";
        notes = "";
        activeEditorField = 0;
        stringArrayEditor.setText("");
        updateArrays();
        updateBoxes();
    }

    /**
     *  Updates the String for the text fields based on the arrays
     */
    private void updateArrays()
    {
        if (selectedElement != null)
        {
            for (String temp : selectedElement.getAttributes())
            {
                attributes = attributes + temp + "\n";
            }
            for (String temp : selectedElement.getOperation())
            {
                operations = operations + temp + "\n";
            }
            for (String temp : selectedElement.getResponsibilities())
            {
                responsibilities = responsibilities + temp + "\n";
            }
            notes = selectedElement.getNotes();
        }
        this.revalidate();
    }

    /**
     * Updates the element type with the allowed element types based on the model type.
     */
    private void updateTypeBox()
    {
        boxType.removeAllItems();
        for (String type : guiController.getAllowedElements())
        {
            boxType.addItem(type);
        }
        this.revalidate();
    }

    /**
     * Updates the linked model to the model box containing the links of model linked to the active model with the relative model paths.
     */
    private void updateBoxModelToModel()
    {
        boxModelToModel.removeAllItems();
        for (String path : guiController.getModel().getLinkedModels())
        {
            boxModelToModel.addItem(path);
        }
        this.revalidate();
    }

    /**
     * Updates the connection box with the connection descriptions (ID and end element) that are connected to the selected model.
     */
    private void updateConnectionBox()
    {
        if (selectedElement != null)
        {
            connectionBox.removeAllItems();

            if (selectedElement.getConnections().size() > 0)
            {
                for (Connection temp : selectedElement.getConnections())
                {
                    connectionBox.addItem(temp.toString());
                }
            }
        }
        this.revalidate();
    }

    /**
     * Updates the inner element box with the element description (ID and end description) that are inner elements of the selected model.
     */
    private void updateInnerElementBox()
    {
        if (selectedElement != null)
        {
            innerElementBox.removeAllItems();
            if (selectedElement.getInnerElements().size() > 0)
            {
                for (Element temp : selectedElement.getInnerElements())
                {
                    innerElementBox.addItem(temp.toString());
                }
            }
        }
        this.revalidate();
    }

    /**
     * Updates the linked model top the element box containing the links of model linked to the selected element with the relative model paths.
     */
    private void updateBoxModelToElement()
    {
        if (selectedElement != null)
        {
            boxModelToElement.removeAllItems();
            for (String path : selectedElement.getLinkedModels())
            {
                boxModelToElement.addItem(path);
            }
        }
        this.revalidate();
    }

    /**
     * Calls all box update methods except for the element type 
     */
    private void updateBoxes()
    {
        updateBoxModelToModel();
        updateInnerElementBox();
        updateConnectionBox();
        updateBoxModelToElement();
    }

    /**
     * Attribute button action, enables all String Array buttons (attributes, Operations, responsibilities and notes) disables the attribute button, sets the label of the text field to attribute and loads the attribute text into the to text field.
     * 
     * @param evt button pressed event
     */
    private void editAttributesButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editAttributesButtonActionPerformed
    {//GEN-HEADEREND:event_editAttributesButtonActionPerformed
        if (selectedElement != null)
        {
            enableButtons();
            editAttributesButton.setEnabled(false);
            labelTextfield.setText("Attributes:");
            stringArrayEditor.setText(attributes);
            activeEditorField = 1;
        }
    }//GEN-LAST:event_editAttributesButtonActionPerformed

    /**
     * Operations button action, enables all String Array buttons (attributes, Operations, responsibilities and notes) disables the operations button, sets the label of the text field to operations and loads the operations text into the to text field.
     * 
     * @param evt button pressed event
     */
    private void editOperationsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editOperationsButtonActionPerformed
    {//GEN-HEADEREND:event_editOperationsButtonActionPerformed
        if (selectedElement != null)
        {
            enableButtons();
            editOperationsButton.setEnabled(false);
            labelTextfield.setText("Operations:");
            stringArrayEditor.setText(operations);
            activeEditorField = 2;
        }
    }//GEN-LAST:event_editOperationsButtonActionPerformed

    /**
     * Responsibilities button action, enables all String Array buttons (attributes, Operations, responsibilities and notes) disables the responsibilities button, sets the label of the text field to responsibilities and loads the responsibilities text into the to text field.
     * 
     * @param evt button pressed event
     */
    private void editResponsibiltiesButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editResponsibiltiesButtonActionPerformed
    {//GEN-HEADEREND:event_editResponsibiltiesButtonActionPerformed
        if (selectedElement != null)
        {
            enableButtons();
            editResponsibiltiesButton.setEnabled(false);
            labelTextfield.setText("Responsibilities:");
            stringArrayEditor.setText(responsibilities);
            activeEditorField = 3;
        }
    }//GEN-LAST:event_editResponsibiltiesButtonActionPerformed

    /**
     * Notes button action, enables all String Array buttons (attributes, Operations, responsibilities and notes) disables the notes button, sets the label of the text field to notes and loads the notes text into the to text field.
     * 
     * @param evt button pressed event
     */
    private void editNotesButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editNotesButtonActionPerformed
    {//GEN-HEADEREND:event_editNotesButtonActionPerformed
        if (selectedElement != null)
        {
            enableButtons();
            editNotesButton.setEnabled(false);
            labelTextfield.setText("Notes: ");
            stringArrayEditor.setText(notes);
            activeEditorField = 4;
        }
    }//GEN-LAST:event_editNotesButtonActionPerformed

    /**
     * Stores the value of the text field to the appropriate string.
     * 
     * @param evt focus lost event
     */
    private void stringArrayEditorFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_stringArrayEditorFocusLost
    {//GEN-HEADEREND:event_stringArrayEditorFocusLost
        if (activeEditorField == 1)
        {
            attributes = stringArrayEditor.getText();
        }
        else if (activeEditorField == 2)
        {
            operations = stringArrayEditor.getText();
        }
        else if (activeEditorField == 3)
        {
            responsibilities = stringArrayEditor.getText();
        }
        else if (activeEditorField == 4)
        {
            notes = stringArrayEditor.getText();
        }
    }//GEN-LAST:event_stringArrayEditorFocusLost

    /**
     * Calls the saveChanges() methods to save changes. 
     * 
     * @param evt button pressed event
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        saveChanges();
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * Retrieves the connection ID from the selected connection in the combobox and then calls the main controller to open that connection.
     * 
     * @param evt button pressed event
     */
    private void editConnectionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editConnectionButtonActionPerformed
    {//GEN-HEADEREND:event_editConnectionButtonActionPerformed
        if (selectedElement != null)
        {
            if (connectionBox.getSelectedIndex() != -1)
            {
                String connectionID = connectionBox.getSelectedItem().toString();
                connectionID = guiController.getIDFromBox(connectionID);
                guiController.editConnection(connectionID);
                updateConnectionBox();
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Select an connection first.");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Select an element first.");
        }
    }//GEN-LAST:event_editConnectionButtonActionPerformed

    /**
     * Gets the selected connection removed from the selected element
     * 
     * @param evt button pressed event
     */
    private void removeConnectionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeConnectionButtonActionPerformed
    {//GEN-HEADEREND:event_removeConnectionButtonActionPerformed
        if (selectedElement != null)
        {
            if (connectionBox.getSelectedIndex() != -1)
            {
                String connectionID = connectionBox.getSelectedItem().toString();
                connectionID = guiController.getIDFromBox(connectionID);
                Connection connectionToBeRemoved = guiController.findConnection(connectionID);
                selectedElement.getConnections().remove(connectionToBeRemoved);
                updateConnectionBox();
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Select an connection first.");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Select an element first.");
        }
    }//GEN-LAST:event_removeConnectionButtonActionPerformed

    /**
     * Creates a new connection starting from the selected element using the createNewConnection() method from the main controller and given the selectedElement as a parameter
     * 
     * @param evt button pressed event
     */
    private void newConnectionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newConnectionButtonActionPerformed
    {//GEN-HEADEREND:event_newConnectionButtonActionPerformed
        if (selectedElement != null)
        {
            guiController.createNewConnection(selectedElement);
            updateConnectionBox();
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Select an element first.");
        }
    }//GEN-LAST:event_newConnectionButtonActionPerformed

    /**
     * Creates a new element within the model and assigns it a unique ID
     * 
     * @param evt button pressed event
     */
    private void newElementButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newElementButtonActionPerformed
    {//GEN-HEADEREND:event_newElementButtonActionPerformed
        String nextElementId = guiController.findNextAvailableElementID();
        fieldIdentifier.setText(nextElementId);
        fieldDescription.setText("");
        fieldStartLevel.setText("0");
        fieldEndLevel.setText("0");
        fieldTeminationLevel.setText("0");
        attributes = "";
        operations = "";
        responsibilities = "";
        notes = "";
        activeEditorField = 0;
        stringArrayEditor.setText("");
        selectedElement = new Element(nextElementId, boxType.getItemAt(0));
        guiController.addElement(selectedElement);
        updateGUI();
    }//GEN-LAST:event_newElementButtonActionPerformed

    /**
     * Updates the connection drop down box with the current connections assigned to the selected element
     * 
     * @param evt selecting the drop down box
     */
    private void connectionBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_connectionBoxPopupMenuWillBecomeVisible
    {//GEN-HEADEREND:event_connectionBoxPopupMenuWillBecomeVisible
        updateConnectionBox();
        this.revalidate();
    }//GEN-LAST:event_connectionBoxPopupMenuWillBecomeVisible

    /**
     * Confirms if they indeed want to removes the selected inner element and if so calls the removeElement() method of the main controller giving the ID of the selected element.
     * 
     * @param evt button pressed event
     */
    private void removeInnerElementButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeInnerElementButtonActionPerformed
    {//GEN-HEADEREND:event_removeInnerElementButtonActionPerformed
        if (selectedElement != null)
        {
            Object[] options =
            {
                "Yes, delete",
                "No, don't delete"
            };
            int n = JOptionPane.showOptionDialog(null, "Are you sure you want to delete the selected inner element?", "Delete inner element?", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[1]);
            if (n == 0)
            {
                String innerElementID = innerElementBox.getSelectedItem().toString();
                innerElementID = guiController.getIDFromBox(innerElementID);
                guiController.removeElement(innerElementID);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Select an element first.");
        }
    }//GEN-LAST:event_removeInnerElementButtonActionPerformed

    /**
     * Confirms if they indeed want to removes the selected element and if so calls the removeElement() method of the main controller giving the ID of the selected element.
     * 
     * @param evt button pressed event
     */
    private void removeElementActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeElementActionPerformed
    {//GEN-HEADEREND:event_removeElementActionPerformed
        if (selectedElement != null)
        {
            Object[] options =
            {
                "Yes, delete",
                "No, don't delete"
            };
            int n = JOptionPane.showOptionDialog(null, "Are you sure you want to delete the selected element?", "Delete element?", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[1]);
            if (n == 0)
            {
                guiController.removeElement(selectedElement.getIdentifier());
                selectedElement = null;
                updateList();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Select an element first.");
        }
    }//GEN-LAST:event_removeElementActionPerformed

    /**
     * Saves the current selected element and then creates a new inner element within the selected element
     * 
     * @param evt button pressed event
     */
    private void newInnerElementButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newInnerElementButtonActionPerformed
    {//GEN-HEADEREND:event_newInnerElementButtonActionPerformed
        if (selectedElement != null)
        {
            saveChanges();
            String nextElementId = guiController.findNextAvailableElementID();
            fieldIdentifier.setText(nextElementId);
            fieldDescription.setText("");
            fieldStartLevel.setText("0");
            fieldEndLevel.setText("0");
            fieldTeminationLevel.setText("0");
            attributes = "";
            operations = "";
            responsibilities = "";
            notes = "";
            activeEditorField = 0;
            stringArrayEditor.setText("");
            Element newInnerElement = new Element(nextElementId, boxType.getItemAt(0));
            selectedElement.getInnerElements().add(newInnerElement);
            guiController.loadAllInstances();
            selectedElement = guiController.findElement(newInnerElement.getIdentifier());
            updateGUI();
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Select an element first.");
        }
    }//GEN-LAST:event_newInnerElementButtonActionPerformed

    /**
     * Updates the inner element drop down box with the current inner elements assigned to the selected element
     * 
     * @param evt selecting the drop down box
     */
    private void innerElementBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_innerElementBoxPopupMenuWillBecomeVisible
    {//GEN-HEADEREND:event_innerElementBoxPopupMenuWillBecomeVisible
        updateInnerElementBox();
        this.revalidate();
    }//GEN-LAST:event_innerElementBoxPopupMenuWillBecomeVisible

    /**
     * Opens a file chooser that allows a JSON file to be linked to the currently open model by storing the relative path to the current opened file  
     * 
     * @param evt button pressed event
     */
    private void linkModelToMActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_linkModelToMActionPerformed
    {//GEN-HEADEREND:event_linkModelToMActionPerformed
        // sets it to only accept files
        linkFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        //opens the file selection pane and sets the file path
        int returnValue = linkFileChooser.showOpenDialog(null);
        File linkedFile = null;

        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
            linkedFile = linkFileChooser.getSelectedFile();
            String path = guiController.getRelativePath(linkedFile);
            guiController.addLinkedModel(path);
            updateBoxModelToModel();
        }
    }//GEN-LAST:event_linkModelToMActionPerformed

    /**
     * Loads the currently selected file in the drop down selection box for models linked to the model and loads it. Checks if they want to save the current model to a file first.
     * 
     * @param evt button pressed event
     */
    private void loadLinkedModelMActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadLinkedModelMActionPerformed
    {//GEN-HEADEREND:event_loadLinkedModelMActionPerformed
        if (boxModelToModel.getSelectedItem() != null)
        {
            saveChanges();
            guiController.saveChangesOpenModel();
            guiController.loadLinkedModel(boxModelToModel.getSelectedItem().toString());
            selectedElement = null;
            updateGUI();
        }
    }//GEN-LAST:event_loadLinkedModelMActionPerformed

    /**
     * De-links the currently selected file in the drop down selection box for models linked to the model.
     * 
     * @param evt button pressed event
     */
    private void delinkModelFromMActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_delinkModelFromMActionPerformed
    {//GEN-HEADEREND:event_delinkModelFromMActionPerformed
        if (boxModelToModel.getSelectedItem() != null)
        {
            String link = boxModelToModel.getSelectedItem().toString();
            {
                if (guiController.getModel().getLinkedModels().contains(link))
                {

                    guiController.getModel().getLinkedModels().remove(link);
                    updateBoxModelToModel();
                }
            }
        }
    }//GEN-LAST:event_delinkModelFromMActionPerformed

    /**
     * Opens a file chooser that allows a JSON file to be linked to the currently selected element by storing the relative path to the current opened file.  
     * 
     * @param evt button pressed event
     */
    private void linkModelToEActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_linkModelToEActionPerformed
    {//GEN-HEADEREND:event_linkModelToEActionPerformed
        if (selectedElement != null)
        {
            // sets it to only accept files
            linkFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

            //opens the file selection pane and sets the file path
            int returnValue = linkFileChooser.showOpenDialog(null);
            File linkedFile = null;

            if (returnValue == JFileChooser.APPROVE_OPTION)
            {
                linkedFile = linkFileChooser.getSelectedFile();
                String path = guiController.getRelativePath(linkedFile);
                selectedElement.getLinkedModels().add(path);
                updateBoxModelToElement();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Select an element first.");
        }
    }//GEN-LAST:event_linkModelToEActionPerformed

    /**
     * Loads the currently selected file in the drop down selection box for models linked to the element and loads it. Checks if they want to save the current model to a file first.
     * 
     * @param evt button pressed event
     */
    private void loadLinkedModelEActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadLinkedModelEActionPerformed
    {//GEN-HEADEREND:event_loadLinkedModelEActionPerformed
        if (selectedElement != null && boxModelToElement.getSelectedItem() != null)
        {
            
            saveChanges();
            guiController.saveChangesOpenModel();
            guiController.loadLinkedModel(boxModelToElement.getSelectedItem().toString());
            selectedElement = null;
            updateGUI();
        }
        
    }//GEN-LAST:event_loadLinkedModelEActionPerformed

    /**
     * De-links the currently selected file in the drop down selection box for models linked to the element.
     * 
     * @param evt button pressed event
     */
    private void delinkModelFromEActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_delinkModelFromEActionPerformed
    {//GEN-HEADEREND:event_delinkModelFromEActionPerformed
        if (selectedElement != null && boxModelToElement.getSelectedItem() != null)
        {
            String link = boxModelToElement.getSelectedItem().toString();
            {
                if (selectedElement.getLinkedModels().contains(link))
                {

                    selectedElement.getLinkedModels().remove(link);
                    updateBoxModelToElement();
                }
            }
        }
    }//GEN-LAST:event_delinkModelFromEActionPerformed

    /**
     * Open the selected inner element for editing.
     * 
     * @param evt button pressed event
     */
    private void editInnerElementButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editInnerElementButtonActionPerformed
    {//GEN-HEADEREND:event_editInnerElementButtonActionPerformed
        if (selectedElement != null)
        {
            saveChanges();
            String lookup = innerElementBox.getSelectedItem().toString();
            String lookupID = guiController.getIDFromBox(lookup);
            selectedElement = guiController.findElement(lookupID);
            String type = selectedElement.getType();
            boxType.setSelectedItem(type);
            fieldIdentifier.setText(selectedElement.getIdentifier());
            fieldDescription.setText(selectedElement.getDescription());
            fieldStartLevel.setText(Integer.toString(selectedElement.getStartLevel()));
            fieldEndLevel.setText(Integer.toString(selectedElement.getEndLevel()));
            fieldTeminationLevel.setText(Integer.toString(selectedElement.getterminationLevel()));
            attributes = "";
            operations = "";
            responsibilities = "";
            notes = "";
            activeEditorField = 0;
            stringArrayEditor.setText("");
            updateArrays();
            updateBoxes();
            int selectedItem = 0;            
            for(String temp : listElements.getItems())
            {
                if(lookup.equals(temp))
                {
                    listElements.select(selectedItem);
                }
                selectedItem++;
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Select an element first.");
        }
    }//GEN-LAST:event_editInnerElementButtonActionPerformed

    /**
     * Updates all the relevant list boxes and text arrays to reflect any changes to the model
     */
    private void updateGUI()
    {
        updateList();
        updateBoxes();
        updateArrays();
    }
    
    /**
     * Enables all the text area selection buttons.
     */
    private void enableButtons()
    {        
        labelTextfield.setText("Nothing selected:");
        editAttributesButton.setEnabled(true);
        editNotesButton.setEnabled(true);
        editResponsibiltiesButton.setEnabled(true);
        editOperationsButton.setEnabled(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxModelToElement;
    private javax.swing.JComboBox<String> boxModelToModel;
    private javax.swing.JComboBox<String> boxType;
    private javax.swing.JComboBox<String> connectionBox;
    private javax.swing.JButton delinkModelFromE;
    private javax.swing.JButton delinkModelFromM;
    private javax.swing.JButton editAttributesButton;
    private javax.swing.JButton editConnectionButton;
    private javax.swing.JButton editInnerElementButton;
    private javax.swing.JButton editNotesButton;
    private javax.swing.JButton editOperationsButton;
    private javax.swing.JButton editResponsibiltiesButton;
    private javax.swing.JTextField fieldDescription;
    private javax.swing.JTextField fieldEndLevel;
    private javax.swing.JTextField fieldIdentifier;
    private javax.swing.JTextField fieldStartLevel;
    private javax.swing.JTextField fieldTeminationLevel;
    private javax.swing.JComboBox<String> innerElementBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelTextfield;
    private javax.swing.JButton linkModelToE;
    private javax.swing.JButton linkModelToM;
    private java.awt.List listElements;
    private javax.swing.JButton loadLinkedModelE;
    private javax.swing.JButton loadLinkedModelM;
    private javax.swing.JButton newConnectionButton;
    private javax.swing.JButton newElementButton;
    private javax.swing.JButton newInnerElementButton;
    private javax.swing.JButton removeConnectionButton;
    private javax.swing.JButton removeElement;
    private javax.swing.JButton removeInnerElementButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JEditorPane stringArrayEditor;
    // End of variables declaration//GEN-END:variables
}
